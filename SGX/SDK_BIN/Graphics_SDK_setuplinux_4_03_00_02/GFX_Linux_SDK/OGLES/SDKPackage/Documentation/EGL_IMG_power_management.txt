Name

    IMG_power_management 

Name Strings

    EGL_IMG_power_management

Notice

    Copyright Imagination Technologies Limited, 2005.

Contact

    Imagination Technologies

Status

    DRAFT

Version

    Draft 0.3, 25 January 2005

Number

    XXX

Dependencies

    The extension is written against the EGL 1.0 Specification.
    May be implemented in any version of EGL and OpenGLES.

Overview

    EGL 1.0 does not address power management issues, but defers such issues to 
    platform specific notes. This extension constitutes the platform specific notes
    for the class of devices which require application interaction on 
    notification that a power management event has occurred. OpenGL ES 
    implementations which advertise this extension constitute devices in this class.

    This extension is specifically designed to allow an OpenGL ES application
    to manage the return from a power management event on systems where power 
    management event cause significant loss of GL context information. Typically 
    these systems are characterised by graphics memory that can be de-powered 
    independent from the main system memory (i.e. non-UMA systems).

    Applications should regard the presence of this extension as an indication 
    that it is expected that they should respond appropriately to the power 
    management events as described below.

    To assist with speculative coding to cope with power management events, the 
    reporting and required application response have been kept deliberately simple, 
    and in essence requires the application to destroy its graphics contexts and 
    re-run its initialisation code.

IP Status

    None

Issues

    (1) Do the surfaces associated with the context that need to be destroyed?

    Resolution: No. However the surfaces contents become invalid, so an application 
    should ensure that when recovering from a power management event that the 
    entirety of the surface is rendered to, thus avoiding anomalous pixels.   

    (2) What happens when textures are shared across multiple contexts?

    Resolution: The OpenGLES/EGL specifications are followed here. That means 
    that in order to free the memory associated with the now invalid textures
    all contexts that use the shared textures need to be destroyed. In other words
    if operations on one context fails and the error is EGL_CONTEXT_LOST_IMG
    then it is safe to imply that all contexts are invalid and that all are should 
    be destroyed and recreated.

New Procedures and Functions

    None.

New Tokens

    Returned by eglGetError 

        EGL_CONTEXT_LOST_IMG              0x300E

Additions to OpenGLES 1.0 Specification 

    None

Additions to Chapter 2.6 of the EGL Specification (Power Management)

    Power management events can occur asynchronously while an application is running. 
    When the system returns from the power management event the EGLContext will be 
    invalidated, and therefore all subsequent GL calls on this context will produce 
    no effect.

    Following a power management event calls to eglSwapBuffers, eglCopyBuffer 
    or eglMakeCurrent will indicate failure by returning EGL_FALSE. The application 
    should now call eglGetError to determine if a power management event has occurred.
    The error EGL_CONTEXT_LOST_IMG will be returned if a power management event has 
    occurred.
     
    On detection of the EGL_CONTEXT_LOST_IMG error the application must destroy all 
    contexts (by calling eglDestroyContext for each context). To continue rendering 
    it must then recreate any contexts it requires, and subsequently restore any GL 
    state and objects it wishes to use. 

    Any EGLSurfaces that the application has created need not be destroyed but their 
    contents will be invalid.

Additions to Chapter 3.1 of the EGL Specification (Errors)

    (append at end of the list of errors)

    EGL_CONTEXT_LOST_IMG
        A power management event has occurred and the application must destroy all 
    contexts and reinitialise GL state and object to continue rendering.

Additions to Chapter 3.6.3 of the EGL Specification (Binding Contexts and Drawables)

    (Append to end of the 3rd paragraph, after: "[...] an EGL_BAD_ALLOC error will be 
    generated.")

	If a power management event has occurred an EGL_CONTEXT_LOST_IMG error will be 
    generated.

Additions to Chapter 3.8.4 of the EGL Specification (Posting Errors)

    (Append to end of paragraph, after: "[...] an EGL_BAD_NATIVE_PIXMAP error will be 
    generated.")

	If eglSwapBuffers or eglCopyBuffers is called after a power management event has 
    happened an EGL_CONTEXT_LOST_IMG error will be generated.

Errors

    EGL_CONTEXT_LOST_IMG is generated by calling eglMakeCurrent after a power 
    management event.

    EGL_CONTEXT_LOST_IMG is generated by calling eglSwapBuffers after a power 
    management event.

    EGL_CONTEXT_LOST_IMG is generated by calling eglCopyBuffers after a power 
    management event.

New State

    None

Conformance Testing

    Put machine in power down (sleep) mode and upon comeback to normal power mode
    any eglSwapBuffers, eglMakeCurrent and eglCopyBuffer calls (except eGLDestroyContext)
    should return false and the current error should be EGL_CONTEXT_LOST_IMG.

Revision History

    0.1, 4/2/2004 vs: Initial revision.
    0.2, 5/2/2004 gdc: First released draft.
    0.3, 25/1/2005 nt: Added Number paragraph placeholder and copyright notice.

