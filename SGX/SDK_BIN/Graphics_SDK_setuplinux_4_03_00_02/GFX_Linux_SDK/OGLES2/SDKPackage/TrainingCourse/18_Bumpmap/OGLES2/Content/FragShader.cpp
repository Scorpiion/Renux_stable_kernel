// This file was created by Filewrap 1.1
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: FragShader.fsh ********

// File data
static const char _FragShader_fsh[] = 
	"uniform sampler2D  sBaseTex;\r\n"
	"uniform sampler2D  sNormalMap;\r\n"
	"\t\t\r\n"
	"varying lowp    vec3  LightVec;\r\n"
	"varying mediump vec2  TexCoord;\r\n"
	"\r\n"
	"void main()\r\n"
	"{\r\n"
	"\t// read the per-pixel normal from the normal map and expand to [-1, 1]\r\n"
	"\tlowp vec3 normal = texture2D(sNormalMap, TexCoord).rgb * 2.0 - 1.0;\r\n"
	"\t\r\n"
	"\t// linear interpolations of normals may cause shortened normals and thus\r\n"
	"\t// visible artifacts on low-poly models.\r\n"
	"\t// We omit the normalization here for performance reasons\r\n"
	"\t\r\n"
	"\t// calculate diffuse lighting as the cosine of the angle between light\r\n"
	"\t// direction and surface normal (both in surface local/tangent space)\r\n"
	"\t// We don't have to clamp to 0 here because the framebuffer write will be clamped\r\n"
	"\tlowp float lightIntensity = dot(LightVec, normal);\r\n"
	"\r\n"
	"\t// read base texture and modulate with light intensity\r\n"
	"\tlowp vec3 texColor = texture2D(sBaseTex, TexCoord).rgb;\t\r\n"
	"\tgl_FragColor = vec4(texColor * lightIntensity, 1.0);\r\n"
	"}\r\n";

// Register FragShader.fsh in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_FragShader_fsh("FragShader.fsh", _FragShader_fsh, 935);

// ******** End: FragShader.fsh ********

// This file was created by Filewrap 1.1
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: FragShader.fsc ********

// File data
A32BIT _FragShader_fsc[] = {
0x10fab438,0xcd221bf0,0x35050100,0x901,0xf121629f,0x0,0x0,0x5e040000,0x1000000,0x4000200,0x0,0x18000000,0x203,0x4400,0x2010000,0x0,0x0,0xd2010000,0x55535020,0x17,0x1c6,0x1,0x0,0x48,0x0,0x3,0x6d,0x1,0x0,0x0,0xffffffff,0x0,0x770009,0xffff,0x30005,0x0,0x3,0x0,0x0,0x0,0x0,0xfffc0000,0x3,0x10004,0x0,0x110000,0xffffffff,0x0,0x56780000,0x40000,0x10000,0x10003,0x0,0x2,0x0,0x20001,0x0,0x4,0x50011,0x10000,0x80010000,0x80018001,0x8001,0x0,
0x0,0x70000,0x6880007,0x10001,0x10001,0x10000,0x30002,0x10001,0x10001,0x0,0x0,0x30001,0x20002,0x2,0x2,0x80018001,0x80008000,0x0,0x0,0x4,0x1010000,0xfa100000,0x50000234,0xa32008,0x2,0x2,0x80018000,0x80018001,0x0,0x0,0x4,0x10101,0xfa100000,0x80200000,0x10a02002,0x5,0x1,0x80018000,0x80018001,0x0,0x0,0x10000,0x70007,0x30688,0x30003,0x20003,0x40003,0x10005,0x10001,0x1,0x0,0x10000,0x20003,0x20002,0x40000,0x80000000,0x80018001,0x8001,0x0,0x0,0x130000,0xb00010,0x10069081,0x41030081,
0x606a000,0x138ab,0x1c3ef004,0x2344083,0x1c269004,0x64081,0x0,0x5020d201,0x175553,0x1c60000,0x10000,0x0,0x1480000,0x0,0x30000,0x6d0000,0x10000,0x0,0x0,0xffff0000,0xffff,0x90000,0xffff0077,0x50000,0x5,0x30000,0x0,0x0,0x0,0x0,0x0,0x1fffc,0x40000,0x1,0x0,0xffff0011,0xffff,0x0,0x5678,0x4,0x30001,0x1,0x20000,0x0,0x10000,0x2,0x40000,0x110000,0x5,0x1,0x80018001,0x80018001,0x0,0x0,0x0,0x70007,0x10688,0x10001,0x1,0x20001,0x10003,0x10001,0x1,0x0,
0x10000,0x20005,0x20002,0x20000,0x80010000,0x80008001,0x8000,0x0,0x40000,0x0,0x101,0x234fa10,0x20085000,0x200a3,0x20000,0x80000000,0x80018001,0x8001,0x0,0x40000,0x1010000,0x1,0xfa10,0x20008020,0x510a0,0x10000,0x80000000,0x80018001,0x8001,0x0,0x0,0x70001,0x6880007,0x10001,0x10001,0x30002,0x50004,0x10001,0x10001,0x0,0x0,0x50001,0x20002,0x2,0x4,0x80018000,0x80018001,0x0,0x0,0x0,0x100013,0x108100b0,0x811000,0x4103,0x38ab0600,0xf0040001,0x40831c3c,0x10040234,0x40811c24,0x6,0x800,0x0,0x0,0x400000,
0x0,0x0,0x0,0x803f0000,0x4000000,0x726f4e73,0x4d6c616d,0x7061,0x31800,0x100,0x1000002,0x100,0x43786554,0x64726f6f,0x3000000,0x1000005,0x10000,0x3000204,0x694c0000,0x56746867,0x6365,0x50400,0x100,0x3000001,0x700,0x73614273,0x78655465,0x18000000,0x1000003,0x20000,0x1000101,0x0,
};

// Register FragShader.fsc in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_FragShader_fsc("FragShader.fsc", _FragShader_fsc, 1150);

// ******** End: FragShader.fsc ********

