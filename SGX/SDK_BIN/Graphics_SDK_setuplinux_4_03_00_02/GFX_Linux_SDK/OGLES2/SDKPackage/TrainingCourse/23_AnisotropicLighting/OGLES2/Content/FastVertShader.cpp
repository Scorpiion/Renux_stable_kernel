// This file was created by Filewrap 1.1
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: FastVertShader.vsh ********

// File data
static const char _FastVertShader_vsh[] = 
	"/******************************************************************************\r\n"
	"* Vertex Shader (Fast method)\r\n"
	"*******************************************************************************\r\n"
	" This technique uses the dot product between the light direction and the normal\r\n"
	" to generate an x coordinate. The dot product between the half angle vector \r\n"
	" (vector half way between the viewer's eye and the light direction) and the \r\n"
	" normal to generate a y coordinate. These coordinates are used to lookup the \r\n"
	" intensity of light from the special image, which is accessible to the shader \r\n"
	" as a 2d texture. The intensity is then used to shade a fragment and hence \r\n"
	" create an anisotropic lighting effect.\r\n"
	"******************************************************************************/\r\n"
	"\r\n"
	"attribute highp vec3  inVertex;\r\n"
	"attribute highp vec3  inNormal;\r\n"
	"\r\n"
	"uniform highp mat4  MVPMatrix;\r\n"
	"uniform highp vec3  msLightDir;\r\n"
	"uniform highp vec3  msEyePos;\r\n"
	"\r\n"
	"varying mediump vec2  TexCoord;\r\n"
	"\r\n"
	"void main() \r\n"
	"{ \r\n"
	"\t// transform position\r\n"
	"\tgl_Position = MVPMatrix * vec4(inVertex, 1);\r\n"
	"\t\r\n"
	"\t// Calculate eye direction in model space\r\n"
	"\thighp vec3 msEyeDir = normalize(msEyePos - inVertex);\r\n"
	"\t\r\n"
	"\t// Calculate vector half way between the vertexToEye and light directions.\r\n"
	"\t// (division by 2 ignored as it is irrelevant after normalisation)\r\n"
	"\thighp vec3 halfAngle = normalize(msEyeDir + msLightDir); \r\n"
	"\t\r\n"
	"\t// Use dot product of light direction and normal to generate s coordinate.\r\n"
	"\t// We use GL_CLAMP_TO_EDGE as texture wrap mode to clamp to 0 \r\n"
	"\tTexCoord.s = dot(msLightDir, inNormal); \r\n"
	"\t// Use dot product of half angle and normal to generate t coordinate.\r\n"
	"\tTexCoord.t = dot(halfAngle, inNormal); \r\n"
	"} \r\n";

// Register FastVertShader.vsh in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_FastVertShader_vsh("FastVertShader.vsh", _FastVertShader_vsh, 1698);

// ******** End: FastVertShader.vsh ********

// This file was created by Filewrap 1.1
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: FastVertShader.vsc ********

// File data
A32BIT _FastVertShader_vsc[] = {
0x10fab438,0x1bed8e8,0x35050100,0x901,0xf121629f,0x0,0x0,0x40000,0x0,0x4000200,0x0,0x9000000,0x2,0x0,0x20000,0x0,0x0,0x98020000,0x55535020,0x17,0x28c,0x1,0x0,0xc,0x0,0x3,0x6d,0x1,0x8,0x0,0xffffffff,0x0,0x76000a,0xffff,0x50007,0x0,0x160000,0x0,0x0,0x0,0x0,0xfffc0000,0x0,0x0,0x0,0x110000,0xffffffff,0x160000,0x56780007,0x10000,0x18,0x10000,0x10019,0x10000,0x2001a,0x10000,0x30004,0x10000,0x40005,0x10000,0x50006,0x10000,0x60007,0x10000,
0x70008,0x10000,0x80009,0x10000,0x9000a,0x10000,0xa000b,0x10000,0xb000c,0x10000,0xc000d,0x10000,0xd000e,0x10000,0xe000f,0x10000,0xf0010,0x10000,0x100011,0x10000,0x110012,0x10000,0x120013,0x10000,0x130014,0x10000,0x140015,0x10000,0x150016,0x770000,0x40000,0x110000,0x2,0xe,0x80018001,0x80018001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x70201a1d,0x821084,0x70605a1e,0x821084,0x70609a1f,0x821086,0x4183,0x801400,0x8000c180,0x801004,0x0,0x8801240,0x3040400a,0x801000,0x3080c00b,0x801000,0x3060c00c,0x801006,0x208204,
0x801400,0x8020c181,0x801004,0x200080,0x8801240,0x1060c0b0,0x811004,0x60000700,0x28831000,0x2,0x10,0x80018000,0x80048004,0x0,0x0,0x4,0x10001,0x10001,0x10001,0x10001,0x10001,0x10001,0x10001,0x10404,0xfa100000,0xf060068e,0x10a82206,0x7000da19,0x821005,0xf0000790,0x38980606,0x70201a1a,0x821005,0xf0004994,0x38820606,0xf0008b98,0x38a20206,0xd0400d8e,0x811206,0x4104,0x38980602,0xe0200000,0x28831002,0x70601a1c,0x821005,0x60400182,0x801001,0xe0010501,0x38980606,0xe0014580,0x38820606,0xc0818603,0x38a20205,0xe0a00080,0x28831001,0x6,0x2000,0x0,0x0,0x803f0000,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f0000,0x3f0000,0x0,0x0,0x7000000,0x65566e69,0x78657472,0x4000000,0x1000004,0x10000,0x7000400,0x6c670000,0x736f505f,0x6f697469,0x100006e,0x505,0x1000001,0x40000,0x4d00000f,0x614d5056,0x78697274,0x16000000,0x1000003,0x10000,0xffff1004,0x736d0000,0x50657945,0x736f,0x30400,0x100,0x4140001,0x700,0x694c736d,0x44746867,0x7269,0x30400,0x100,0x4180001,0x700,0x6f4e6e69,0x6c616d72,0x4000000,0x1000004,0x10000,
0x7000404,0x65540000,0x6f6f4378,0x6472,0x50300,0x100,0x2000001,0x300,0x0,
};

// Register FastVertShader.vsc in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_FastVertShader_vsc("FastVertShader.vsc", _FastVertShader_vsc, 1056);

// ******** End: FastVertShader.vsc ********

