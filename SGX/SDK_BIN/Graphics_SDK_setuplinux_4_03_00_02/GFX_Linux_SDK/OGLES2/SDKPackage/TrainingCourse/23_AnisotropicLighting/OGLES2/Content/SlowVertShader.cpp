// This file was created by Filewrap 1.1
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: SlowVertShader.vsh ********

// File data
static const char _SlowVertShader_vsh[] = 
	"/******************************************************************************\r\n"
	"* Vertex Shader (Slow method)\r\n"
	"*******************************************************************************\r\n"
	" This technique uses the most significant normal to the grained surface (i.e.\r\n"
	" normal in same plane as light vector and eye direction vector) to calculate\r\n"
	" intensities for the diffuse and specular lighting, which create an anisotropic\r\n"
	" effect. The diffuse lighting factor is defined as the dot product of the light\r\n"
	" direction and the normal (L.N). The specular lighting factor is defined as the\r\n"
	" square of the dot product of the view vector (eye direction) and the\r\n"
	" reflection vector ((V.R) * (V.R)). \r\n"
	" For convenience these can be expressed in  terms of the the light direction \r\n"
	" (L), view direction (V) and the tangent to the surface (T). Where the \r\n"
	" direction of the tangent points along the grain.\r\n"
	"******************************************************************************/\r\n"
	"attribute highp vec3  inVertex; \r\n"
	"attribute highp vec3  inNormal;\r\n"
	"\r\n"
	"uniform highp mat4  MVPMatrix;\r\n"
	"uniform highp vec3  msLightDir;\r\n"
	"uniform highp vec3  msEyeDir;\r\n"
	"uniform highp vec4  Material; \r\n"
	"uniform highp vec3  GrainDir;\r\n"
	"\r\n"
	"varying lowp vec3  DiffuseIntensity; \r\n"
	"varying lowp vec3  SpecularIntensity; \r\n"
	"\r\n"
	"void main() \r\n"
	"{\r\n"
	"\t// Transform position\r\n"
	"\tgl_Position = MVPMatrix * vec4(inVertex, 1.0);\r\n"
	"\t\r\n"
	"\t// Calculate the cross product of normal and grain direction.\r\n"
	"\t// Cross product this with the normal. The result is a vector which is \r\n"
	"\t// perpendicular to the surface and follows the direction of the grain.\r\n"
	"\thighp vec3 normalXgrain = cross(inNormal, GrainDir);\r\n"
	"\thighp vec3 tangent = normalize(cross(normalXgrain, inNormal));\r\n"
	"\t\r\n"
	"\thighp float LdotT = dot(tangent, msLightDir);\r\n"
	"\thighp float VdotT = dot(tangent, msEyeDir);\r\n"
	"\t\r\n"
	"\thighp float NdotL = sqrt(1.0 - LdotT * LdotT);\r\n"
	"\thighp float VdotR = NdotL * sqrt(1.0 - VdotT * VdotT) - VdotT * LdotT;\t\r\n"
	"\r\n"
	"\t// Calculate the diffuse intensity, applying scale and bias.\r\n"
	"\tDiffuseIntensity = vec3(NdotL * Material.x + Material.y);\r\n"
	"\t\r\n"
	"\t// Calculate the specular intensity, applying scale and bias.\r\n"
	"\tSpecularIntensity = vec3(VdotR * VdotR * Material.z + Material.w); \r\n"
	"}\r\n";

// Register SlowVertShader.vsh in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_SlowVertShader_vsh("SlowVertShader.vsh", _SlowVertShader_vsh, 2210);

// ******** End: SlowVertShader.vsh ********

// This file was created by Filewrap 1.1
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: SlowVertShader.vsc ********

// File data
A32BIT _SlowVertShader_vsc[] = {
0x10fab438,0x353fff0,0x35050100,0x901,0xf121629f,0x0,0x0,0xb7050000,0x0,0x4000200,0x0,0x19000000,0x303,0x6500,0x1010000,0x0,0x0,0xd0030000,0x55535020,0x17,0x3c4,0x1,0x0,0xc,0x0,0x3,0x6d,0x1,0x8,0x0,0xffffffff,0x0,0x76000a,0xffff,0x60007,0x0,0x1e0000,0x0,0x0,0x0,0x0,0xfffc0000,0x0,0x0,0x0,0x110000,0xffffffff,0x1e0000,0x56780007,0x10000,0x14,0x10000,0x10015,0x10000,0x20016,0x10000,0x30004,0x10000,0x40005,0x10000,0x50006,0x10000,0x60007,0x10000,
0x70008,0x10000,0x80009,0x10000,0x9000a,0x10000,0xa000b,0x10000,0xb000c,0x10000,0xc000d,0x10000,0xd000e,0x10000,0xe000f,0x10000,0xf0010,0x10000,0x100011,0x10000,0x110012,0x10000,0x120013,0x10000,0x130018,0x10000,0x140019,0x10000,0x15001a,0x10000,0x16001c,0x10000,0x17001d,0x10000,0x18001e,0x10000,0x190020,0x10000,0x1a0021,0x10000,0x1b0022,0x10000,0x1c0023,0x40000,0x3f800000,0x1d,0x77,0x4,0x20011,0x60000,0x80010000,0x80018001,0x8001,0x0,0x0,0x0,0x0,0x85b00000,0x1006d061,0x6300081,0x1004d001,0x45300081,0x1004d021,0x46030081,
0x100ce081,0x85000080,0x100cc0a1,0x5810080,0x100cc061,0x20080,0x20000,0x80010000,0x40898001,0x8000,0x0,0x40000,0x89000000,0x20101,0xc230fa10,0x20009000,0x200a1,0x20000,0x80010000,0x40924092,0x8001,0x0,0x40000,0x92010000,0x60192,0xc200fa10,0x20088000,0x200a0,0x60000,0x80010000,0x80018001,0x8001,0x0,0x40000,0x0,0x0,0x1010000,0x101,0x81fa10,0x14020060,0x81030080,0x10022060,0x1800080,0x124280a0,0x82b00880,0x10029060,0x7000081,0x100260c0,0x22883,0x20000,0x80000000,0x80048001,0x8004,0x0,0x40000,0x4040000,0x1,0x68efa10,0x2206f080,0x210a8,0x1b0000,0x80010000,0x80008000,0x8001,
0x0,0x50000,0x10001,0x10001,0x10001,0x10001,0x10001,0x10001,0x10001,0x10001,0x10001,0x10001,0x1,0x0,0x0,0x1000001,0xfa100000,0x70011a19,0x821005,0xf0000790,0x38980606,0x70201a1a,0x821005,0xf0004994,0x38820606,0xf0008b98,0x38a20206,0xd0400d8e,0x811206,0x14001,0x38980606,0xe0200000,0x28831002,0x70601a1c,0x821005,0x60418182,0x801005,0xf0004ea0,0x38980606,0xf0000f21,0x38820606,0xf020cfa2,0x38a20606,0xe0000080,0x28831002,0x90000034,0x811086,0x80000000,0x8801242,0x80400000,0x8801002,0xb00040a7,0x388dc626,0xc0200000,0x8821242,0x80600080,0x8801002,0xb060c101,0x81100c,0xf080d1a4,0x801005,0x60a00200,0x28a11001,0x1080c1b0,
0x811002,0xf0e112a6,0x801005,0x61000380,0x28a11001,0x6,0x2800,0x0,0x0,0x803f0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f0000,0x3f0000,0x0,0x0,0xa000000,0x65566e69,0x78657472,0x4000000,0x1000004,0x10000,0x7000400,0x6c670000,0x736f505f,0x6f697469,0x100006e,0x505,0x1000001,0x40000,0x4d00000f,0x614d5056,0x78697274,0x16000000,
0x1000003,0x10000,0xffff1004,0x6e690000,0x6d726f4e,0x6c61,0x40400,0x100,0x4040001,0x700,0x69617247,0x7269446e,0x4000000,0x1000003,0x10000,0x7000414,0x736d0000,0x6867694c,0x72694474,0x4000000,0x1000003,0x10000,0x7000418,0x736d0000,0x44657945,0x7269,0x30400,0x100,0x41c0001,0x700,0x6574614d,0x6c616972,0x5000000,0x1000003,0x10000,0xf000420,0x69440000,0x73756666,0x746e4965,0x69736e65,0x7974,0x50400,0x100,0x3000001,0x700,0x63657053,0x72616c75,0x65746e49,0x7469736e,0x79,0x504,0x1000001,0x30400,0x7,
};

// Register SlowVertShader.vsc in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_SlowVertShader_vsc("SlowVertShader.vsc", _SlowVertShader_vsc, 1495);

// ******** End: SlowVertShader.vsc ********

